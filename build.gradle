buildscript {
    ext.kotlin_version = "1.2.61"
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.2.61"
    id "org.jetbrains.intellij" version "0.3.9"
    id "org.jetbrains.grammarkit" version "2018.1.7"
}

project.ext.kotlin_version = "1.2.61"

apply plugin: "kotlin"
apply plugin: "org.jetbrains.intellij"
apply plugin: "idea"
apply plugin: "org.jetbrains.grammarkit"

import org.jetbrains.grammarkit.tasks.GenerateLexer

task generateTranscriptLexer(type: GenerateLexer) {
    source = "grammar/Transcript.flex"
    targetDir = "gen/vladsaif/syncedit/plugin/lang/transcript/lexer"
    targetClass = "TranscriptLexer"
    purgeOldFiles = true
}

compileJava.dependsOn generateTranscriptLexer

compileKotlin {
    kotlinOptions.verbose = true
}

kotlin {
    experimental {
        coroutines "enable"
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

sourceSets {
    main {
        kotlin {
            srcDir {
                "src/main/kotlin"
            }
        }
        java {
            srcDirs("gen", "src/main/java")
        }
        resources {
            srcDir {
                "resources"
            }
        }
    }
    test {
        kotlin {
            srcDir {
                "src/test/kotlin"
            }
        }
    }
}

test.systemProperty "google.credentials", project.properties["google.credentials"]

intellij {
    pluginName "ScreencastEditor"
    plugins "Kotlin"
    downloadSources true
    instrumentCode true
}

repositories {
    mavenCentral()
}

project.afterEvaluate {
    def unwantedArtifacts = [
            "kotlinx-coroutines-core-0.20.jar",
            "kotlinx-coroutines-jdk8-0.20.jar",
            "kotlinx-coroutines-core-0.22.5.jar",
            "kotlinx-coroutines-jdk8-0.22.5.jar"
    ]

    def excludedFiles = configurations.compileOnly.resolvedConfiguration.resolvedArtifacts.findAll {
        it.file.name in unwantedArtifacts
    }*.file

    sourceSets {
        main {
            compileClasspath -= files(excludedFiles)
        }
        test {
            compileClasspath -= files(excludedFiles)
        }
    }
}


dependencies {
    compile group: "javazoom", name: "jlayer", version: "1.0.1"
    compile group: "com.googlecode.soundlibs", name: "mp3spi", version: "1.9.5.4"
    compile "com.google.cloud:google-cloud-speech:0.56.0-beta"
    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.2.61") {
        exclude group: "org.jetbrains.kotlin", module: "kotlin-stdlib"
    }
    compile("org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:0.25.0") {
        exclude group: "org.jetbrains.kotlin", module: "kotlin-stdlib"
    }
    compile("org.jetbrains.kotlinx:kotlinx-coroutines-guava:0.25.0") {
        exclude group: "org.jetbrains.kotlin", module: "kotlin-stdlib"
    }
    testCompile("org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version") {
        exclude group: "org.jetbrains.kotlin", module: "kotlin-stdlib"
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
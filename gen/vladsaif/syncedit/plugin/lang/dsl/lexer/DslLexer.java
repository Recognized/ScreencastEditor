/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package vladsaif.syncedit.plugin.lang.dsl.lexer;

import vladsaif.syncedit.plugin.lang.dsl.psi.*;
import vladsaif.syncedit.plugin.lang.dsl.parser.*;
import vladsaif.syncedit.plugin.lang.dsl.*;
import com.intellij.psi.TokenType;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>DslLexer.flex</tt>
 */
class DslLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int META_COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 14784 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\21\1\44\1\45\1\46\1"+
    "\21\1\47\2\21\1\50\4\21\1\25\1\51\1\52\5\21\2\25\1\53\31\21\1\25\1\54\1\21"+
    "\1\55\40\21\1\56\17\21\1\57\1\60\1\61\1\62\13\21\1\63\10\21\123\25\1\64\7"+
    "\25\1\65\1\66\37\21\1\25\1\66\u0582\21\1\67\u017f\21");

  /* The ZZ_CMAP_Y table has 3584 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\2\10\1\11\1\12\2\10\1\13\1\14\3\0\1\15"+
    "\1\16\1\17\1\20\2\10\1\21\3\10\1\21\71\10\1\22\1\10\1\23\1\24\1\25\1\26\2"+
    "\24\16\0\1\27\1\15\1\30\1\31\2\10\1\32\11\10\1\33\21\10\1\34\1\35\23\10\1"+
    "\24\1\7\3\10\1\21\1\36\1\7\4\10\1\37\1\40\4\0\1\41\1\42\1\24\3\10\2\43\1\24"+
    "\1\44\1\45\1\0\1\46\5\10\1\47\3\0\1\50\1\51\13\10\1\52\1\41\1\53\1\54\1\0"+
    "\1\55\1\24\1\56\1\57\3\10\3\0\1\60\12\10\1\61\1\0\1\62\1\24\1\0\1\63\3\10"+
    "\1\47\1\64\1\20\2\10\1\61\1\65\1\66\1\67\2\24\3\10\1\70\10\24\1\71\1\25\6"+
    "\24\1\72\2\0\1\73\1\74\6\10\1\75\2\0\1\76\1\10\1\77\1\0\2\7\1\100\1\101\1"+
    "\102\2\10\1\71\1\103\1\104\1\105\1\106\1\56\1\107\1\77\1\0\1\110\1\45\1\100"+
    "\1\111\1\102\2\10\1\71\1\112\1\113\1\114\1\115\1\116\1\117\1\120\1\0\1\121"+
    "\1\24\1\100\1\33\1\32\2\10\1\71\1\122\1\104\1\41\1\123\1\124\1\24\1\77\1\0"+
    "\1\36\1\24\1\100\1\101\1\102\2\10\1\71\1\122\1\104\1\105\1\115\1\120\1\107"+
    "\1\77\1\0\1\36\1\24\1\125\1\126\1\127\1\130\1\131\1\126\1\10\1\132\1\133\1"+
    "\134\1\135\1\24\1\120\1\0\1\24\1\36\1\100\1\27\1\71\2\10\1\71\1\136\1\137"+
    "\1\140\1\134\1\141\1\23\1\77\1\0\2\24\1\142\1\27\1\71\2\10\1\71\1\136\1\104"+
    "\1\140\1\134\1\141\1\30\1\77\1\0\1\143\1\24\1\142\1\27\1\71\4\10\1\144\1\140"+
    "\1\145\1\56\1\24\1\77\1\0\1\24\1\35\1\142\1\10\1\21\1\35\2\10\1\32\1\146\1"+
    "\21\1\147\1\150\1\0\2\24\1\151\1\24\1\7\5\10\1\152\1\153\1\154\1\73\1\0\1"+
    "\155\4\24\1\156\1\157\1\160\1\7\1\161\1\162\1\152\1\163\1\164\1\165\1\0\1"+
    "\166\4\24\1\124\2\24\1\155\1\0\1\155\1\167\1\170\1\10\1\7\3\10\1\25\1\40\1"+
    "\0\1\140\1\171\1\0\1\40\3\0\1\44\1\172\7\24\5\10\1\47\1\0\1\173\1\0\1\155"+
    "\1\61\1\174\1\175\1\176\1\177\1\10\1\200\1\201\1\0\1\165\4\10\1\33\1\17\5"+
    "\10\1\202\51\10\1\127\1\21\1\127\5\10\1\127\4\10\1\127\1\21\1\127\1\10\1\21"+
    "\7\10\1\127\10\10\1\203\4\24\2\10\2\24\12\10\1\25\1\24\1\7\114\10\1\101\2"+
    "\10\1\7\2\10\1\43\11\10\1\126\1\124\1\24\1\10\1\27\1\204\1\24\2\10\1\204\1"+
    "\24\2\10\1\205\1\24\1\10\1\27\1\206\1\24\6\10\1\207\3\0\1\210\1\211\1\0\1"+
    "\155\3\24\1\212\1\0\1\155\13\10\1\24\5\10\1\213\10\10\1\214\1\24\3\10\1\25"+
    "\1\0\1\2\1\0\1\2\1\120\1\0\3\10\1\214\1\25\1\24\5\10\1\110\2\0\1\51\1\155"+
    "\1\0\1\155\4\24\2\10\1\154\1\2\6\10\1\171\1\73\3\0\1\105\1\0\1\155\1\0\1\155"+
    "\1\37\13\24\1\215\5\10\1\207\1\0\1\215\1\110\1\0\1\155\1\24\1\216\1\2\1\24"+
    "\1\217\3\10\1\76\1\176\1\0\1\63\4\10\1\61\1\0\1\2\1\24\4\10\1\207\2\0\1\24"+
    "\1\0\1\220\1\0\1\63\3\10\1\214\12\24\1\221\2\0\1\222\1\223\1\24\30\10\4\0"+
    "\1\73\2\24\1\72\42\10\2\214\4\10\2\214\1\10\1\224\3\10\1\214\6\10\1\27\1\164"+
    "\1\225\1\25\1\226\1\110\1\10\1\25\1\225\1\25\1\24\1\216\3\24\1\227\1\24\1"+
    "\37\1\124\1\24\1\230\1\24\1\44\1\231\1\36\1\37\2\24\1\10\1\25\3\10\1\43\2"+
    "\24\1\0\1\44\1\232\1\0\1\233\1\24\1\234\1\35\1\146\1\235\1\26\1\236\1\10\1"+
    "\237\1\240\1\241\2\24\5\10\1\124\116\24\5\10\1\21\5\10\1\21\20\10\1\25\1\242"+
    "\1\243\1\24\4\10\1\33\1\17\7\10\1\37\1\24\1\56\2\10\1\21\1\24\10\21\4\0\5"+
    "\24\1\37\72\24\1\240\3\24\1\7\1\200\1\235\1\25\1\7\11\10\1\21\1\244\1\7\12"+
    "\10\1\202\1\240\4\10\1\214\1\7\12\10\1\21\2\24\3\10\1\43\6\24\170\10\1\214"+
    "\11\24\71\10\1\25\6\24\21\10\1\25\10\24\5\10\1\214\41\10\1\25\2\10\1\0\1\243"+
    "\2\24\5\10\1\154\1\72\1\245\3\10\1\56\12\10\1\155\3\24\1\37\1\10\1\35\14\10"+
    "\1\246\1\110\1\24\1\10\1\43\11\24\1\10\1\247\1\250\2\10\1\47\2\24\1\124\6"+
    "\10\1\110\1\24\1\63\5\10\1\207\1\0\1\44\1\24\1\0\1\155\2\0\1\63\1\45\1\0\1"+
    "\63\2\10\1\61\1\165\2\10\1\154\1\0\1\2\1\24\3\10\1\25\1\74\5\10\1\47\1\0\1"+
    "\233\1\37\1\0\1\155\4\24\5\10\1\76\1\73\1\24\1\250\1\251\1\0\1\155\2\10\1"+
    "\21\1\252\6\10\1\175\1\253\1\213\2\24\1\254\1\10\1\47\1\255\1\24\3\256\1\24"+
    "\2\21\22\24\4\10\1\47\1\257\1\0\1\155\64\10\1\110\1\24\2\10\1\21\1\260\5\10"+
    "\1\110\40\24\55\10\1\214\15\10\1\23\4\24\1\21\1\24\1\260\1\261\1\10\1\71\1"+
    "\21\1\164\1\262\15\10\1\23\3\24\1\260\54\10\1\214\2\24\10\10\1\35\6\10\5\24"+
    "\1\10\1\25\2\0\2\24\1\73\1\24\1\131\2\24\1\240\3\24\1\36\1\27\20\10\1\263"+
    "\1\230\1\24\1\0\1\155\1\7\2\10\1\111\1\7\2\10\1\43\1\264\12\10\1\21\3\35\1"+
    "\265\1\266\2\24\1\267\1\10\1\136\2\10\1\21\2\10\1\270\1\10\1\214\1\10\1\214"+
    "\4\24\17\10\1\43\10\24\6\10\1\25\20\24\1\271\20\24\3\10\1\25\6\10\1\124\5"+
    "\24\3\10\1\21\2\24\3\10\1\43\6\24\3\10\1\214\4\10\1\110\1\10\1\235\5\24\23"+
    "\10\1\214\1\0\1\155\52\24\1\214\1\71\4\10\1\33\1\272\2\10\1\214\25\24\2\10"+
    "\1\214\1\24\3\10\1\23\10\24\7\10\1\264\10\24\1\273\1\72\1\136\1\7\2\10\1\110"+
    "\1\114\4\24\3\10\1\25\20\24\6\10\1\214\1\24\2\10\1\214\1\24\2\10\1\43\21\24"+
    "\11\10\1\124\66\24\1\217\6\10\1\0\1\73\3\24\1\120\1\0\2\24\1\217\5\10\1\0"+
    "\1\274\2\24\3\10\1\124\1\0\1\155\1\217\3\10\1\154\1\0\1\140\1\0\10\24\1\217"+
    "\5\10\1\47\1\0\1\275\1\24\1\0\1\155\24\24\5\10\1\47\1\0\1\24\1\0\1\155\46"+
    "\24\55\10\1\21\22\24\14\10\1\43\63\24\5\10\1\21\72\24\7\10\1\124\130\24\10"+
    "\10\1\25\1\24\1\76\4\0\1\73\1\24\1\56\1\217\1\10\14\24\1\23\153\24\1\276\1"+
    "\277\2\0\1\300\1\2\3\24\1\301\22\24\1\302\67\24\12\10\1\27\10\10\1\27\1\303"+
    "\1\304\1\10\1\305\1\136\7\10\1\33\1\306\2\27\3\10\1\307\1\164\1\35\1\71\51"+
    "\10\1\214\3\10\1\71\2\10\1\202\3\10\1\202\2\10\1\27\3\10\1\27\2\10\1\21\3"+
    "\10\1\21\3\10\1\71\3\10\1\71\2\10\1\202\1\310\6\0\1\136\3\10\1\156\1\7\1\202"+
    "\1\311\1\234\1\312\1\156\1\224\1\156\2\202\1\117\1\10\1\32\1\10\1\110\1\313"+
    "\1\32\1\10\1\110\50\24\32\10\1\21\5\24\106\10\1\25\1\24\33\10\1\214\74\24"+
    "\1\116\3\24\14\0\20\24\36\0\2\24");

  /* The ZZ_CMAP_A table has 1632 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\6\1\3\1\4\1\24\1\3\1\5\6\6\4\0\1\3\1\0\1\15\1\0\1\2\1\0\1\10\3\0\1\12"+
    "\1\0\1\26\2\0\1\11\1\13\11\1\2\0\1\16\1\0\1\17\2\0\22\2\1\20\1\14\1\21\1\0"+
    "\1\2\1\7\12\2\1\22\1\0\1\23\1\0\6\6\1\25\2\6\2\0\4\2\4\0\1\2\2\0\1\6\7\0\1"+
    "\2\4\0\1\2\5\0\7\2\1\0\2\2\4\0\4\2\16\0\5\2\7\0\1\2\1\0\1\2\1\0\5\2\1\0\2"+
    "\2\6\0\1\2\1\0\3\2\1\0\1\2\1\0\4\2\1\0\13\2\1\0\3\2\1\0\5\6\2\0\6\2\1\0\1"+
    "\2\15\0\1\2\1\0\15\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0\1\6\3\2\5\0\5\6\6\0\1\2\4"+
    "\0\3\6\5\0\3\2\7\6\4\0\2\2\1\6\13\2\1\0\1\2\7\6\2\2\2\6\1\0\4\6\2\2\2\6\3"+
    "\2\2\0\1\2\7\0\1\6\1\2\1\6\6\2\3\6\2\0\11\2\3\6\1\2\6\0\2\6\6\2\4\6\2\2\2"+
    "\0\2\6\1\2\11\6\1\2\3\6\1\2\5\6\2\0\1\2\3\6\4\0\1\2\1\0\6\2\4\0\13\6\1\0\4"+
    "\6\6\2\3\6\1\2\2\6\1\2\7\6\2\2\2\6\2\0\2\6\1\0\3\6\1\0\10\2\2\0\2\2\2\0\6"+
    "\2\1\0\1\2\3\0\4\2\2\0\1\6\1\2\7\6\2\0\2\6\2\0\3\6\1\2\5\0\2\2\1\0\5\2\4\0"+
    "\3\2\4\0\2\2\1\0\2\2\1\0\2\2\1\0\2\2\2\0\1\6\1\0\5\6\4\0\2\6\2\0\3\6\3\0\1"+
    "\6\7\0\4\2\1\0\1\2\7\0\4\6\3\2\1\6\2\0\1\2\1\0\2\2\1\0\3\2\2\6\1\0\3\6\2\0"+
    "\1\2\11\0\1\6\1\2\1\0\6\2\3\0\3\2\1\0\4\2\3\0\2\2\1\0\1\2\1\0\2\2\3\0\2\2"+
    "\3\0\2\2\4\0\5\6\3\0\3\6\1\0\4\6\2\0\1\2\6\0\1\6\4\2\1\0\5\2\3\0\1\2\7\6\1"+
    "\0\2\6\5\0\2\6\3\0\2\6\1\0\3\2\1\0\2\2\5\0\3\2\2\0\1\2\3\6\1\0\4\6\1\2\1\0"+
    "\4\2\1\0\1\2\4\0\1\6\4\0\6\6\1\0\1\6\3\0\2\6\4\0\1\2\1\6\2\2\7\6\4\0\10\2"+
    "\3\6\7\0\2\2\1\0\1\2\2\0\2\2\1\0\1\2\2\0\1\2\6\0\4\2\1\0\3\2\1\0\1\2\1\0\1"+
    "\2\2\0\2\2\1\0\3\2\2\6\1\0\2\6\1\2\2\0\5\2\1\0\1\2\1\0\6\6\2\0\2\6\2\0\4\2"+
    "\5\0\1\6\1\0\1\6\1\0\1\6\4\0\2\6\5\2\3\6\6\0\1\6\1\0\7\6\1\2\2\6\4\2\3\6\1"+
    "\2\3\6\2\2\7\6\3\2\4\6\5\2\14\6\1\2\1\6\3\2\1\0\7\2\2\0\3\6\2\2\3\6\3\0\2"+
    "\2\2\6\4\0\1\2\1\0\2\6\4\0\4\2\10\6\3\0\1\2\3\0\2\2\1\6\5\0\3\6\2\0\1\2\1"+
    "\6\1\2\5\0\6\2\2\0\5\6\3\2\3\0\10\6\5\2\2\6\3\0\3\2\3\6\1\0\5\6\4\2\1\6\4"+
    "\2\3\6\2\2\2\0\1\2\1\0\1\2\1\0\1\2\1\0\1\2\2\0\3\2\1\0\6\2\2\0\2\2\2\24\5"+
    "\6\5\0\1\2\5\0\6\6\1\0\1\6\3\0\4\6\11\0\1\2\4\0\1\2\1\0\5\2\2\0\1\2\1\0\4"+
    "\2\1\0\3\2\2\0\4\2\5\0\5\2\4\0\1\2\4\0\4\2\3\6\2\2\5\0\2\6\2\0\3\2\6\6\1\0"+
    "\2\2\2\0\4\2\1\0\2\2\1\6\3\2\1\6\4\2\1\6\10\2\2\6\4\0\1\2\1\6\4\0\1\6\5\2"+
    "\2\6\3\0\3\2\4\0\3\2\2\6\2\0\6\2\1\0\3\6\1\0\2\6\5\0\5\2\5\0\1\2\1\6\3\2\1"+
    "\0\2\2\1\0\7\2\2\0\1\6\6\0\2\2\2\0\3\2\3\0\2\2\3\0\2\2\2\0\3\6\4\0\3\2\1\0"+
    "\2\2\1\0\1\2\5\0\1\6\2\0\1\2\3\0\1\2\2\0\2\2\3\6\1\0\2\6\1\0\3\6\2\0\1\6\2"+
    "\0\1\6\4\2\10\0\5\6\3\0\6\6\2\0\3\6\2\0\4\6\4\0\3\6\5\0\1\2\2\0\2\2\2\0\4"+
    "\2\1\0\4\2\1\0\1\2\1\0\6\2\2\0\5\2\1\0\4\2\1\0\4\2\2\0\2\6\1\0\1\2\1\0\1\2"+
    "\5\0\1\2\1\0\1\2\1\0\3\2\1\0\3\2\1\0\3\2");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\2\1\1\2\1\3\1\0\3\1\2\4\1\1"+
    "\1\5\1\6\1\7\1\10\1\0\1\7\1\11\1\12"+
    "\1\13\1\0\1\14\1\15\2\4\2\0\1\7\2\15"+
    "\1\0\1\7\1\0\1\15\1\0\6\7\1\16";

  private static int [] zzUnpackAction() {
    int [] result = new int[44];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\27\0\56\0\105\0\134\0\56\0\163\0\212"+
    "\0\241\0\270\0\317\0\346\0\375\0\56\0\56\0\u0114"+
    "\0\56\0\u012b\0\56\0\56\0\56\0\56\0\u0142\0\56"+
    "\0\u0159\0\u0170\0\56\0\u0187\0\u019e\0\u01b5\0\u01cc\0\u01e3"+
    "\0\u01fa\0\u0211\0\u0228\0\56\0\u023f\0\u0256\0\u026d\0\u0284"+
    "\0\u029b\0\u02b2\0\u02c9\0\u02c9";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[44];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\3\1\4\1\5\1\6\1\7\1\3\1\10\1\11"+
    "\1\12\3\3\1\13\1\14\1\3\1\15\1\3\1\16"+
    "\1\17\2\0\2\3\1\20\1\3\1\5\1\21\1\22"+
    "\5\3\1\23\4\3\1\24\1\25\2\3\2\0\1\26"+
    "\30\0\2\4\3\0\1\4\4\0\1\4\11\0\1\4"+
    "\4\0\1\5\27\0\1\6\24\0\1\27\26\0\1\4"+
    "\35\0\1\30\1\31\14\0\4\13\1\0\7\13\1\32"+
    "\1\33\11\13\4\14\1\0\7\14\1\33\2\14\1\33"+
    "\7\14\2\0\1\34\4\0\1\35\20\0\1\36\11\0"+
    "\1\36\17\0\1\21\23\0\2\27\3\0\1\27\1\3"+
    "\3\0\1\27\11\0\1\27\1\0\12\37\1\40\14\37"+
    "\4\13\1\0\22\13\1\0\2\34\3\0\1\34\4\0"+
    "\1\34\5\0\1\3\3\0\1\34\3\0\1\41\25\0"+
    "\1\42\11\0\1\42\13\0\12\37\1\43\25\37\1\44"+
    "\1\40\14\37\1\0\2\41\3\0\1\41\1\45\3\0"+
    "\1\41\11\0\1\41\2\0\1\46\11\0\1\46\13\0"+
    "\11\37\1\44\1\43\14\37\21\0\1\3\6\0\1\47"+
    "\11\0\1\47\14\0\1\50\11\0\1\50\14\0\1\51"+
    "\11\0\1\51\14\0\1\52\11\0\1\52\14\0\1\53"+
    "\11\0\1\53\14\0\1\54\11\0\1\54\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[736];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\2\1\1\11\1\0\6\1\2\11\1\1"+
    "\1\11\1\0\4\11\1\0\1\11\2\1\1\11\2\0"+
    "\3\1\1\0\1\1\1\0\1\11\1\0\7\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[44];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  DslLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return DslTokenTypes.CHAR;
            } 
            // fall through
          case 15: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 16: break;
          case 3: 
            { return DslTokenTypes.CRLF;
            } 
            // fall through
          case 17: break;
          case 4: 
            { return DslTokenTypes.STRING;
            } 
            // fall through
          case 18: break;
          case 5: 
            { return DslTokenTypes.OPEN_BRACE;
            } 
            // fall through
          case 19: break;
          case 6: 
            { return DslTokenTypes.CLOSE_BRACE;
            } 
            // fall through
          case 20: break;
          case 7: 
            { return DslTokenTypes.INTEGER_LITERAL;
            } 
            // fall through
          case 21: break;
          case 8: 
            { yybegin(YYINITIAL); return DslTokenTypes.CRLF;
            } 
            // fall through
          case 22: break;
          case 9: 
            { return DslTokenTypes.OPEN_BRACKET;
            } 
            // fall through
          case 23: break;
          case 10: 
            { return DslTokenTypes.CLOSE_BRACKET;
            } 
            // fall through
          case 24: break;
          case 11: 
            { return DslTokenTypes.COMMA;
            } 
            // fall through
          case 25: break;
          case 12: 
            { yybegin(META_COMMENT); return DslTokenTypes.EOL_COMMENT_START;
            } 
            // fall through
          case 26: break;
          case 13: 
            { return DslElementType.COMMENT;
            } 
            // fall through
          case 27: break;
          case 14: 
            { return DslTokenType.TOO_BIG;
            } 
            // fall through
          case 28: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
